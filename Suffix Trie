#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <stack>
using namespace std;
#define ull unsigned long long int
#define ll long long int
#define pb push_back
#define mp make_pair
#define fast_io cin.tie(0), cin.sync_with_stdio(false);
#define PI 3.14159265359
#define eps 1e-9
#define unvisited -1
typedef vector<int>vi;
typedef pair<int,int> ii;
typedef pair<int,ii> iii;
typedef vector<ii> vii;
typedef vector<iii> viii;
typedef pair<int, string> istr;
typedef vector<istr> vistr;
typedef vector< vector<int> > vvi;
typedef vector< vector<ii> > vvii;
const int ox[8]={1,0,-1,0,1,-1,1,-1};
const int oy[8]={0,1,0,-1,1,-1,-1,1};
const int inf = 1000000001;
const int mod = 1e9+7;
const int tam = 1e5+5;
struct vertex
{
	int terminal;
	vector< vertex*> l;
	vertex()
	{
		l.assign(100,NULL);
		terminal = false;
	}
};
class SuffixTrie
{
	private:
		vertex *root;
		void insertS(string x)
		{
			vertex *atual = root;
			int p = 0;
			int tam = x.size();
			while(p<tam)
			{
				int idx = x[p] - 'A';
				if(atual->l[idx] == NULL)
				{
					atual->l[idx] = new vertex;
				}
				atual = atual->l[idx];
				p++;
			}
			atual->terminal=true;
		}
		void caminho(vertex *atual, string x)
		{
			bool folha = true;
			for(int i=0;i<atual->l.size();i++)
			{
				if(atual->l[i] != NULL)
				{
					folha=false;
					if(atual->terminal && x.size())
						cout<<x<<endl;
					caminho(atual->l[i],x+(char)(i+'A'));
				}
			}
			if(folha && x.size())
				cout<<x<<endl;
		}
	public:
		SuffixTrie()
		{
			root = new vertex;
		}
		void insert(string x)
		{
			int tam = x.size();
			for(int i=0;i<tam;i++)
			{
				insertS(x.substr(i,tam-i));
			}
		}
		void imprime()
		{
			caminho(root, "");
		}
};
int main()
{
	SuffixTrie a;
	a.insert("CAR");
	a.insert("CAT");
	a.insert("RAT");
	a.imprime();
}
	
